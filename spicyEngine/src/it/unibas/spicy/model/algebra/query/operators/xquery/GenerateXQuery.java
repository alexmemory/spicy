/*
    Copyright (C) 2007-2011  Database Group - Universita' della Basilicata
    Giansalvatore Mecca - giansalvatore.mecca@unibas.it
    Salvatore Raunich - salrau@gmail.com

    This file is part of ++Spicy - a Schema Mapping and Data Exchange Tool
    
    ++Spicy is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    ++Spicy is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ++Spicy.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package it.unibas.spicy.model.algebra.query.operators.xquery;

import it.unibas.spicy.model.mapping.MappingTask;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class GenerateXQuery {

    private static Log logger = LogFactory.getLog(GenerateXQuery.class);
    public static Map<String, String> materializedViews = new HashMap<String, String>();

    public String generateXQuery(MappingTask mappingTask, String fileName) {
        if (logger.isDebugEnabled()) logger.debug("Generating xquery script...");
        StringBuilder result = new StringBuilder("\n");
        result.append(generateCommentUnderDevelopment());
        ////////   declaration and functions
        result.append(generateFunctionStringDeclaration());
        result.append(generateDeclarationMainFunction(fileName));
        ///////    source to target exchange
        result.append(new GenerateXQueryForSourceToTargetExchange().generateXQuery(mappingTask));
//        ///////    target exchange
//        if (mappingTask.getMappingData().hasSelfJoinsInTgdConclusions()) {
//            result.append(new GenerateXQueryForTargetExchange().generateXQuery(mappingTask));
//        }
        ///////    final result
        result.append(generateFinalResult(mappingTask));
        return result.toString();
    }

    public static String generateFinalResult(MappingTask mappingTask) {
        StringBuilder result = new StringBuilder();
        result.append("return \n");
        result.append(new XQFinalNest().toString(mappingTask));
        return result.toString();
    }

    public static String generateDeclarationMainFunction(String fileName) {
        StringBuilder result = new StringBuilder();
        result.append("  let " + XQUtility.DOC + ":=fn:doc(\"" + fileName + "\"),\n");
        return result.toString();
    }


    public static String generateFunctionStringDeclaration() {
        String functionString = "";
        functionString += "declare function local:removeDuplicateTuples($set as element(set)) as element(set) {\n";
        functionString += "   <set> {\n";
        functionString += "      let $tuple := $set/tuple\n";
        functionString += "      for $tupleId in fn:distinct-values($tuple/tupleId)\n";
        functionString += "      return $tuple[tupleId/text()=$tupleId][1]\n";
        functionString += "   } </set>\n";
        functionString += "};\n\n";
        functionString += "declare function local:skolem($name as xs:string, $args as xs:string*) as xs:string {\n";
        functionString += "   fn:concat($name, \"(\", fn:string-join($args, \"\"), \")\")\n";
        functionString += "};\n\n";
        functionString += "declare function local:newId() as xs:string {\n";
        functionString += "   (: plug-in your id generation strategy :)\n";
        functionString += "   \"newId()\"\n";
        functionString += "};\n\n";
        return functionString;
    }

    private static String generateCommentUnderDevelopment() {
        StringBuilder result = new StringBuilder();
        result.append("(:\n");
        result.append("This script was automatically generated by the ++Spicy mapping tool. (http://db.unibas.it/projects/spicy/)\n");
        result.append("Please, note that the XQuery script generation engine is still under development.\n");
        result.append("For this reason, it can contain syntax errors or generate wrong solutions.\n");
        result.append(":)\n\n");
        return result.toString();
    }
    
}

