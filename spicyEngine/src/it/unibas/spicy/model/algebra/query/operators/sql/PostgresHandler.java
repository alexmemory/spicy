/*
    Copyright (C) 2007-2011  Database Group - Universita' della Basilicata
    Giansalvatore Mecca - giansalvatore.mecca@unibas.it
    Salvatore Raunich - salrau@gmail.com

    This file is part of ++Spicy - a Schema Mapping and Data Exchange Tool
    
    ++Spicy is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    ++Spicy is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ++Spicy.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package it.unibas.spicy.model.algebra.query.operators.sql;

import it.unibas.spicy.model.mapping.MappingTask;
import it.unibas.spicy.model.generators.SkolemFunctionGenerator;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class PostgresHandler implements IDBMSHandler {

    private final static String TYPE_AUTOGENERATED = "bigserial PRIMARY KEY";
    private static Log logger = LogFactory.getLog(PostgresHandler.class);

    /////// CONSTANTS
//    public String generateSortArrayFunction() {
//        StringBuilder result = new StringBuilder();
//        result.append("create function sort(anyarray)").append("\n");
//        result.append("returns anyarray as $$").append("\n");
//        result.append("SELECT array(select * from unnest($1) order by 1)").append("\n");
//        result.append("$$ language sql;").append("\n");
//        return result.toString();
//    }
    public String generateSortArrayFunction() {
        StringBuilder result = new StringBuilder();
        result.append("create function sort(anyarray)").append("\n");
        result.append("returns anyarray as $$").append("\n");
        result.append("select array(select $1[i] from generate_series(array_lower($1,1),").append("\n");
        result.append("array_upper($1,1)) g(i) order by 1)").append("\n");
        result.append("$$ language sql strict immutable;").append("\n");
        return result.toString();
    }

    public String getAutoGeneratedColumnType() {
        return TYPE_AUTOGENERATED;
    }

    public String coalesceFunction(String value1, String value2) {
        StringBuilder result = new StringBuilder();
        result.append("coalesce(").append(DBMSUtility.cast(value1, "text")).append(", ").append(value2).append(")");
        return result.toString();
    }

    public String coalesceFunctionWithNull(String value1) {
        return value1;
        //        return coalesceFunction(value1, "\'null\'");
    }

    public String forceCast(String columnName, String targetType) {
        String sqlType = DBMSUtility.getSqlType(targetType);
        return DBMSUtility.cast(columnName, sqlType);
    }


    ////////////////////////////////////////
//    public String skolemStringForSTExchange(SkolemFunctionGenerator skolemFunction, MappingTask mappingTask) {
//        return SkolemHandlerFactory.getInstance().getSkolemGenerator(mappingTask).skolemString(skolemFunction, mappingTask, false);
//    }

    public String skolemString(SkolemFunctionGenerator skolemFunction, MappingTask mappingTask) {
        return SkolemHandlerFactory.getInstance().getSkolemGenerator(mappingTask).skolemString(skolemFunction, mappingTask, mappingTask.getConfig().useSortInSkolems());
    }

}
